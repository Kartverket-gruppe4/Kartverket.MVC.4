@model IEnumerable<Kartverk.Mvc.Models.Feilmelding.FeilmeldingViewModel>

@{
    ViewData["Title"] = "Mine feilmeldinger";
}

<br />
<div style="text-align: center;">
    <h2>Mine feilmeldinger</h2>
</div>
<hr />

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<div class="table-container">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Dato</th>
                <th>Kategori</th>
                <th>Kommune</th>
                <th>Mer</th>
                <th>Rediger</th>
            </tr>
        </thead>
        <tbody>
        @if (Model.Any())
        {
            foreach (var feilmelding in Model.Distinct())
            {
                var kommuneInfo = string.IsNullOrEmpty(feilmelding.KommuneInfo)
                    ? null
                    : Newtonsoft.Json.JsonConvert.DeserializeObject<Kartverk.Mvc.API_Models.KommuneInfo>(feilmelding.KommuneInfo);
                var kommunenavn = kommuneInfo?.Kommunenavn ?? "Ingen kommune";
                var kommunenummer = kommuneInfo?.Kommunenummer ?? "Ikke spesifisert";

                <tr>
                    <td>@feilmelding.Dato.ToString("dd.MM.yyyy")</td>
                    <td>@feilmelding.Kategori</td>
                    <td>@kommunenavn (@kommunenummer)</td>
                    <td>
                        <button class="view-button"
                                data-geojson='@Html.Raw(feilmelding.GeoJson)'
                                data-kommuneinfo="@feilmelding.KommuneInfo"
                                data-kommunenavn="@kommunenavn"
                                data-kommunenummer="@kommunenummer"
                                onclick="openPopup('@feilmelding.Email', '@feilmelding.Dato.ToString("dd.MM.yyyy")', '@feilmelding.Kategori', this, '@feilmelding.Beskrivelse')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                    <td>
                        <form action="@Url.Action("Delete", "Feilmelding")" method="post" onsubmit="return confirm('Er du sikker på at du vil slette denne feilmeldingen?');">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@feilmelding.Id"/>
                            <input type="hidden" name="viewName" value="Oversikt"/>
                            <button type="submit" class="btn btn-danger btn-sm">Slett</button>
                        </form>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">Ingen feilmeldinger funnet.</td>
            </tr>
        }
        </tbody>
    </table>
</div>


<div id="popup" class="popup">
    <div class="popup-content">
        <span class="close" onclick="closePopup()">&times;</span>
        <h3>Feilmelding Detaljer</h3>
        <div class="popup-inner-content">
            <div class="left-section">
                <p>
                    <strong>Email:</strong> <span id="popup-email"></span>
                </p>
                <p>
                    <strong>Dato:</strong> <span id="popup-date"></span>
                </p>
                <p>
                    <strong>Kategori:</strong> <span id="popup-category"></span>
                </p>
                <p>
                    <strong>Kommune:</strong> <span id="popup-municipality"></span>
                </p>
                <p>
                    <strong>Beskrivelse:</strong> <span id="popup-description"></span>
                </p>
            </div>
            <div class="separator"></div>
            <div class="right-section">
                <p>
                    <strong>Kartutsnitt:</strong>
                </p>
                <div id="map" style="width: 100%; height: 200px;"></div>
                <hr/>
                <p>
                    <strong>Status:</strong> <span id="popup-status">Pågående</span>
                </p>
            </div>
        </div>
    </div>
</div>

<script>
        // Declare openPopup function in the global scope
        function openPopup(email, date, category, buttonElement, description, status) {
            document.getElementById('popup-email').innerText = email;
            document.getElementById('popup-date').innerText = date;
            document.getElementById('popup-category').innerText = category;

            var kommunenavn = buttonElement.getAttribute('data-kommunenavn');
            var kommunenummer = buttonElement.getAttribute('data-kommunenummer');
            document.getElementById('popup-municipality').innerText = `${kommunenavn} (${kommunenummer})`;
            document.getElementById('popup-description').innerText = description;
            document.getElementById('popup-status').innerText = status || "Pågående";

            let geojsonData = buttonElement.getAttribute('data-geojson');
            console.log("GeoJSON passed to popup:", geojsonData);

            geojsonData = geojsonData.replace(/\\"/g, '"');

            try {
                geojsonData = geojsonData.replace(/\\"/g, '"');

                if (geojsonData.startsWith('"') && geojsonData.endsWith('"')) {
                    geojsonData = geojsonData.slice(1, -1);
                }

                geojsonData = JSON.parse(geojsonData);

                if (!geojsonData) {
                    throw new Error("GeoJSON is null or undefined.");
                }

                if (geojsonData.type === "Feature") {
                    // Convert a single Feature to a FeatureCollection
                    geojsonData = {
                        type: "FeatureCollection",
                        features: [geojsonData]
                    };
                } else if (geojsonData.type !== "FeatureCollection") {
                    throw new Error(`Unexpected GeoJSON type: ${geojsonData.type}`);
                }
            } catch (error) {
                console.error("GeoJSON validation failed:", error);
                alert(`Failed to parse GeoJSON: ${error.message}`);
                return;
            }

            // Reset or initialize map
            const mapContainer = document.getElementById('map');

            if (window.mapInstance) {
                window.mapInstance.remove(); // Remove the previous map instance
            }

            // Initialize a new map instance
            window.mapInstance = L.map(mapContainer);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 16,
                attribution: '&copy; OpenStreetMap contributors',
            }).addTo(window.mapInstance);

            // Add GeoJSON layer to the map
            const geoJsonLayer = L.geoJSON(geojsonData).addTo(window.mapInstance);

            // Get bounds of the GeoJSON layer
            const bounds = geoJsonLayer.getBounds();
            const boundsSize = bounds.getNorthEast().distanceTo(bounds.getSouthWest()); // Measure bounds size in meters

            console.log("Bounds size (meters):", boundsSize);

            // Set dynamic padding based on bounds size
            let padding;
            if (boundsSize > 2000) {
                padding = [100, 100]; // Larger padding for larger polygons
            } else if (boundsSize > 500) {
                padding = [50, 50]; // Medium padding
            } else {
                padding = [20, 20]; // Small padding for small polygons
            }

            // Fit the map to the bounds with the calculated padding
            window.mapInstance.fitBounds(bounds, {
                padding: padding,
                maxZoom: 14, // Prevent zooming in too much
            });

            // Ensure the map resizes correctly if it was hidden
            setTimeout(() => {
                window.mapInstance.invalidateSize(); // Force map redraw
            }, 300);

            // Show the popup
            const popup = document.getElementById('popup');
            popup.style.display = 'block';
            setTimeout(() => { popup.style.opacity = 1; }, 10);
        }

        function closePopup() {
            const popup = document.getElementById('popup');
            popup.style.opacity = 0;
            setTimeout(() => { popup.style.display = 'none'; }, 300);
        }

        window.onclick = function (event) {
            const popup = document.getElementById('popup');
            if (event.target == popup) {
                closePopup();
            }
        }
    </script>